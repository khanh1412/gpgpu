#ifndef _GKMM_H_
#define _GKMM_H_
#include"CL/opencl/queue.h"
#include<string>
namespace cl {
namespace builtin {
/* KRONECKER KERNEL C = alpha*AB - beta*C
typedef ulong uint64_t;
__kernel void kronecker(uint64_t m, uint64_t n, uint64_t p, uint64_t q, const dtype alpha, const dtype beta, __global const dtype *A, __global const dtype *B, __global dtype *C)
{
	uint64_t global_y = get_global_id(0);
	uint64_t global_x = get_global_id(1);
	uint64_t local_y = get_local_id(0);
	uint64_t local_x = get_local_id(1);
	__local dtype localvar;
	if (local_x==0 && local_y==0)
		localvar = A[n*(global_y/m) + (global_x/n)];
	barrier(CLK_LOCAL_MEM_FENCE);
	C[n*q*global_y + global_x] = alpha*localvar*B[q*local_y + local_x] + beta*C[n*q*global_y + global_x];
}
*/
//string was created by "xxd -i <infile> <outfile>"
std::string kronecker_source({
  0x74, 0x79, 0x70, 0x65, 0x64, 0x65, 0x66, 0x20, 0x75, 0x6c, 0x6f, 0x6e,
  0x67, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x74, 0x3b, 0x0a,
  0x5f, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x20, 0x76, 0x6f, 0x69,
  0x64, 0x20, 0x6b, 0x72, 0x6f, 0x6e, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x28,
  0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x74, 0x20, 0x6d, 0x2c, 0x20,
  0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x74, 0x20, 0x6e, 0x2c, 0x20,
  0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x74, 0x20, 0x70, 0x2c, 0x20,
  0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x74, 0x20, 0x71, 0x2c, 0x20,
  0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x64, 0x74, 0x79, 0x70, 0x65, 0x20,
  0x61, 0x6c, 0x70, 0x68, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74,
  0x20, 0x64, 0x74, 0x79, 0x70, 0x65, 0x20, 0x62, 0x65, 0x74, 0x61, 0x2c,
  0x20, 0x5f, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x20, 0x63, 0x6f,
  0x6e, 0x73, 0x74, 0x20, 0x64, 0x74, 0x79, 0x70, 0x65, 0x20, 0x2a, 0x41,
  0x2c, 0x20, 0x5f, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x20, 0x63,
  0x6f, 0x6e, 0x73, 0x74, 0x20, 0x64, 0x74, 0x79, 0x70, 0x65, 0x20, 0x2a,
  0x42, 0x2c, 0x20, 0x5f, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x20,
  0x64, 0x74, 0x79, 0x70, 0x65, 0x20, 0x2a, 0x43, 0x29, 0x0a, 0x7b, 0x0a,
  0x09, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x74, 0x20, 0x67, 0x6c,
  0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x67, 0x65, 0x74,
  0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x28, 0x30,
  0x29, 0x3b, 0x0a, 0x09, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x74,
  0x20, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x78, 0x20, 0x3d, 0x20,
  0x67, 0x65, 0x74, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x69,
  0x64, 0x28, 0x31, 0x29, 0x3b, 0x0a, 0x09, 0x75, 0x69, 0x6e, 0x74, 0x36,
  0x34, 0x5f, 0x74, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x79, 0x20,
  0x3d, 0x20, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
  0x69, 0x64, 0x28, 0x30, 0x29, 0x3b, 0x0a, 0x09, 0x75, 0x69, 0x6e, 0x74,
  0x36, 0x34, 0x5f, 0x74, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x78,
  0x20, 0x3d, 0x20, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
  0x5f, 0x69, 0x64, 0x28, 0x31, 0x29, 0x3b, 0x0a, 0x09, 0x5f, 0x5f, 0x6c,
  0x6f, 0x63, 0x61, 0x6c, 0x20, 0x64, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6c,
  0x6f, 0x63, 0x61, 0x6c, 0x76, 0x61, 0x72, 0x3b, 0x0a, 0x09, 0x69, 0x66,
  0x20, 0x28, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x78, 0x3d, 0x3d, 0x30,
  0x20, 0x26, 0x26, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x79, 0x3d,
  0x3d, 0x30, 0x29, 0x0a, 0x09, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x76,
  0x61, 0x72, 0x20, 0x3d, 0x20, 0x41, 0x5b, 0x6e, 0x2a, 0x28, 0x67, 0x6c,
  0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x79, 0x2f, 0x6d, 0x29, 0x20, 0x2b, 0x20,
  0x28, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x78, 0x2f, 0x6e, 0x29,
  0x5d, 0x3b, 0x0a, 0x09, 0x62, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x28,
  0x43, 0x4c, 0x4b, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x4d, 0x45,
  0x4d, 0x5f, 0x46, 0x45, 0x4e, 0x43, 0x45, 0x29, 0x3b, 0x0a, 0x09, 0x43,
  0x5b, 0x6e, 0x2a, 0x71, 0x2a, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f,
  0x79, 0x20, 0x2b, 0x20, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x78,
  0x5d, 0x20, 0x3d, 0x20, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2a, 0x6c, 0x6f,
  0x63, 0x61, 0x6c, 0x76, 0x61, 0x72, 0x2a, 0x42, 0x5b, 0x71, 0x2a, 0x6c,
  0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x79, 0x20, 0x2b, 0x20, 0x6c, 0x6f, 0x63,
  0x61, 0x6c, 0x5f, 0x78, 0x5d, 0x20, 0x2b, 0x20, 0x62, 0x65, 0x74, 0x61,
  0x2a, 0x43, 0x5b, 0x6e, 0x2a, 0x71, 0x2a, 0x67, 0x6c, 0x6f, 0x62, 0x61,
  0x6c, 0x5f, 0x79, 0x20, 0x2b, 0x20, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
  0x5f, 0x78, 0x5d, 0x3b, 0x0a, 0x7d, 0x0a
});
event gkmm(queue& Q, size_t m, size_t n, size_t p, size_t q, float alpha, float beta, const buffer& A, const buffer& B, buffer& C)
{
	cl_context context_handler; clGetCommandQueueInfo(Q.handler, CL_QUEUE_CONTEXT, sizeof(cl_context), &context_handler, nullptr);
	cl_device_id device_handler; clGetCommandQueueInfo(Q.handler, CL_QUEUE_DEVICE, sizeof(cl_device_id), &device_handler, nullptr);
	context *target_context = new context(context_handler);
	auto kronecker_kernel_float = cl::kernel(*target_context, device(device_handler), {kronecker_source}, "-Ddtype=float");
	std::free(target_context);
	return Q.enqueueNDRangeKernel(kronecker_kernel_float, {m, n, p, q, alpha, beta, A, B, C}, {m*p, n*q}, {m, n});
}

}
}
#endif
